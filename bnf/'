<trans_unit> ::== {<ext_object>}*

<ext_object> ::== <declaration>
                | <ext_variable_definition>
                | <function_definition> 
                | <class_definition>

<declaration> ::== <variable_declaration>
                 | <function_declaration>
                 | <class_declaration> 


<ext_variable_definition> ::== <variable_declaration> "=" <init_expression> ?

<function_definition> ::== <function_declaration> <code_block>

<class_definition> ::== <class_declaration> <class_block>



<variable_declaration> ::== <typespec> <ident>

<function_declaration> ::== "fun" <ident> <param_list> : <typespec> 

<class_declaration> ::== "class" <ident> 



<code_block> ::== "{" {<statement>}* "}"

<class_block> ::== "{" {<class_access_spec> <ext_object>}* "}"

<class_access_spec> ::== "private"
                       | "protected"
                       | "public"  

<param_list> ::== "(" <variable_declaration> {"," <variable_declaration>} ")"



<typespec> ::== <type_qualifier> <type_specifier>

<type_qualifier> ::== "const" 
                    | "volatile"

<type_specifier> ::== <direct_typespec> { "*" }*

<direct_typespec> ::== <basic_typespec>
                     | <array_typespec>

<basic_typespec> ::== "char"  
                    | "int"
                    | "int16"
                    | "int32"
                    | "int64"   
                    | "float"
                    | "double" 
                    | "void"
                    | <ident>

<array_typespec> ::== <basic_typespec> { "[" <const_expression> "]" }+



<statement> ::==  <code_block>
                | <selection_stat>
                | <iteration_stat>
                | <jump_stat>
                | <expression>

<expression> ::== <variable_declaration>
                | <assignment_expression>
                | <unary_expression>

<assignment_expression> ::== <ident> <assignment_operator> <logical_or_expression>

<assignment_operator> ::== "="
                         | "+="
                         | "-="
                         | "*="
                         | "/="
                         | "<<="
                         | ">>="
                         | "&="
                         | "^="
                         | "|="

# Expression operator priorities (Reversed):
# 1. Logical OR
# 2. Logical AND
# 4. Relational (>, <, >=, <=, ==, !=)
# 5. Bitwise OR
# 6. Bitwise XOR
# 7. Bitwise AND
# 8. Bitwise Shifts (<<, >>)
# 9. Arithmetical Addition/SubTraction (+, -)
# 10. Arithmetical Multiplication/Division/Remainder (*, /, %) 


<logical_or_expression> ::== <logical_and_expression>
                           | <logical_or_expression> "||" <logical_and_expression>

<logical_and_expression> ::== <relational_equality_expression>
                            | <logical_and_expression> "&&" <relational_equality_expression>

<relational_equality_expression> ::== <bitwise_or_expression>
                                    | <relational_equality_expression> "==" <bitwise_or_expression>
                                    | <relational_equality_expression> "!=" <bitwise_or_expression>
                                    | <relational_equality_expression> ">=" <bitwise_or_expression>
                                    | <relational_equality_expression> "<=" <bitwise_or_expression>
                                    | <relational_equality_expression> ">" <bitwise_or_expression>
                                    | <relational_equality_expression> "<" <bitwise_or_expression>

<bitwise_or_expression> ::== <bitwise_xor_expression>
                           | <bitwise_or_expression> "|" <bitwise_xor_expression>

<bitwise_xor_expression> ::== <bitwise_and_expression> 
                            | <bitwise_xor_expression> "^" <bitwise_and_expression>

<bitwise_and_expression> ::== <bitwise_shift_expression> 
                            | <bitwise_and_expression> "&" <bitwise_and_expression>

<bitwise_shift_expression> ::== <arithm_addition_expression>
                              | <bitwise_shift_expression> "<<" <arithm_addition_expression>
                              | <bitwise_shift_expression> ">>" <arithm_addition_expression>

<arithm_addition_expression> ::== <arithm_multiplication_expression>
                               | <arithm_addition_expression> "+" <arithm_multiplication_expression>
                               | <arithm_addition_expression> "-" <arithm_multiplication_expression>

<arithm_multiplication_expression> ::== <unary_expression>
                                      | <arithm_multiplication_expression> "*" <unary_expression>
                                      | <arithm_multiplication_expression> "/" <unary_expression>
                                      | <arithm_multiplication_expression> "%" <unary_expression>

<unary_expression> ::== <secondary_expression>
                      | "--" <secondary_expression>                 # decrement
                      | "++" <secondary_expression>                 # increment
                      | "-" <secondary_expression>                  # unary minus
                      | "+" <secondary_expression>                  # unary plus
                      | "!" <secondary_expression>                  # Logical NOT
                      | "~" <secondary_expression>                  # Bitwise NOT
                      | "(" <typespec> ")" <secondary_expression>   # Type Casting
                      | "*" <secondary_expression>                  # DePointerization
                      | "&" <secondary_expression>                  # Pointerization
                      | "sizeof" <secondary_expression>             # Size of memory block

# Secondary expression - function calls, array member access, class member access/usage.
# Note that we allow Calling/DeArrayzing/Recursive-accessing the class elements.

<secondary_expression> ::== <primary_expression>
                          | <function_call>
                          | <array_access>
                          | <secondary_expression> "." <secondary_expression>  
                          | <secondary_expression> "->" <secondary_expression>

<primary_expression> ::== <ident> 
                        | <constant>
                        | <string>
                        | "(" <expression> ")"

<function_call> ::== <secondary_expression> "(" { <expression> {"," <expression>}* }* ")"
                      
<array_access> ::== <secondary_expression> { "[" <expression> "]" }+

#--------------------------------------------
# Conditionals and Loops
#--------------------------------------------



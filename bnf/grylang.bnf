<trans_unit> ::== {<ext_object>}*

<ext_object> ::== <declaration>
                | <ext_variable_definition>
                | <function_definition> 
                | <class_definition>

<declaration> ::== <variable_declaration>
                 | <function_declaration>
                 | <class_declaration> 


<ext_variable_definition> ::== <variable_declaration> "=" <expression> 

<function_definition> ::== <function_declaration> <code_block>

<class_definition> ::== <class_declaration> <class_block>



<variable_declaration> ::== <typespec> <ident>

<function_declaration> ::== "fun" <ident> <param_list> {":" <typespec>}?

<class_declaration> ::== "class" <ident> <class_inheritance>

<class_inheritance> ::== <extend_specifier> <ident> {"," <ident>}*

<extend_specifier> ::== "extends"
                      | "implements"


<code_block> ::== "{" {<statement>}* "}"

<class_block> ::== "{" { {<class_access_spec>}* <class_object> }* "}"

<class_access_spec> ::== "private"
                       | "protected"
                       | "public"  
                       | "override"
                       | "final" 

<class_object> ::== <ext_object>
                  | <class_constructor>
                  | <class_destructor>
                    
<class_constructor> ::== <ident> <param_list>

<class_destructor> ::== "~" <ident> "(" ")"

<param_list> ::== "(" {<variable_declaration>}? {"," <variable_declaration>}* ")"



<typespec> ::== <type_qualifier> <type_specifier>

<type_qualifier> ::== "const" 
                    | "volatile"

<type_specifier> ::== <direct_typespec> { "*" }*

<direct_typespec> ::== <basic_typespec>
                     | <array_typespec>

<basic_typespec> ::== "char"  
                    | "int"
                    | "int16"
                    | "int32"
                    | "int64"   
                    | "float"
                    | "double" 
                    | "void"
                    | "fun"
                    | "var"
                    | <ident>

<array_typespec> ::== <basic_typespec> { "[" {<const_expression>}? "]" }+

<const_expression> ::== <expression>

<statement> ::==  <code_block>
                | <selection_stat>
                | <iteration_stat>
                | <jump_stat>
                | <labeled_stat>
                | <variable_declaration>
                | <expression>

#--------------------------------------------
# Expressions 
#--------------------------------------------

<expression> ::== <assignment_expression>
                | <logical_or_expression>
                | <initialization_expression>
                | <range_expression>

<initialization_expression> ::== "{" {<expression>}? { "," <expression> }* "}"

<range_expression> ::== <expression> ".." <expression>

<assignment_expression> ::== <ident> <assignment_operator> <expression>

<assignment_operator> ::== "="
                         | "+="
                         | "-="
                         | "*="
                         | "/="
                         | "<<="
                         | ">>="
                         | "&="
                         | "^="
                         | "|="

# Expression operator priorities (Reversed):
# 1. Logical OR
# 2. Logical AND
# 4. Relational (>, <, >=, <=, ==, !=)
# 5. Bitwise OR
# 6. Bitwise XOR
# 7. Bitwise AND
# 8. Bitwise Shifts (<<, >>)
# 9. Arithmetical Addition/SubTraction (+, -)
# 10. Arithmetical Multiplication/Division/Remainder (*, /, %) 


<logical_or_expression> ::== <logical_and_expression>
                           | <logical_or_expression> "||" <logical_and_expression>

<logical_and_expression> ::== <relational_equality_expression>
                            | <logical_and_expression> "&&" <relational_equality_expression>

<relational_equality_expression> ::== <bitwise_or_expression>
                                    | <relational_equality_expression> "==" <bitwise_or_expression>
                                    | <relational_equality_expression> "!=" <bitwise_or_expression>
                                    | <relational_equality_expression> ">=" <bitwise_or_expression>
                                    | <relational_equality_expression> "<=" <bitwise_or_expression>
                                    | <relational_equality_expression> ">" <bitwise_or_expression>
                                    | <relational_equality_expression> "<" <bitwise_or_expression>

<bitwise_or_expression> ::== <bitwise_xor_expression>
                           | <bitwise_or_expression> "|" <bitwise_xor_expression>

<bitwise_xor_expression> ::== <bitwise_and_expression> 
                            | <bitwise_xor_expression> "^" <bitwise_and_expression>

<bitwise_and_expression> ::== <bitwise_shift_expression> 
                            | <bitwise_and_expression> "&" <bitwise_and_expression>

<bitwise_shift_expression> ::== <arithm_addition_expression>
                              | <bitwise_shift_expression> "<<" <arithm_addition_expression>
                              | <bitwise_shift_expression> ">>" <arithm_addition_expression>

<arithm_addition_expression> ::== <arithm_multiplication_expression>
                               | <arithm_addition_expression> "+" <arithm_multiplication_expression>
                               | <arithm_addition_expression> "-" <arithm_multiplication_expression>

<arithm_multiplication_expression> ::== <unary_expression>
                                      | <arithm_multiplication_expression> "*" <unary_expression>
                                      | <arithm_multiplication_expression> "/" <unary_expression>
                                      | <arithm_multiplication_expression> "%" <unary_expression>

<unary_expression> ::== <secondary_expression>
                      | "--" <secondary_expression>                 # decrement
                      | "++" <secondary_expression>                 # increment
                      | "-" <secondary_expression>                  # unary minus
                      | "+" <secondary_expression>                  # unary plus
                      | "!" <secondary_expression>                  # Logical NOT
                      | "~" <secondary_expression>                  # Bitwise NOT
                      | "(" <typespec> ")" <secondary_expression>   # Type Casting
                      | "*" <secondary_expression>                  # DePointerization
                      | "&" <secondary_expression>                  # Pointerization
                      | "sizeof" <secondary_expression>             # Size of memory block

# Secondary expression - function calls, array member access, class member access/usage.
# Note that we allow Calling/DeArrayzing/Recursive-accessing the class elements.

<secondary_expression> ::== <primary_expression>
                          | <function_call>
                          | <array_access>
                          | <secondary_expression> "." <secondary_expression>  
                          | <secondary_expression> "->" <secondary_expression>
                          | <print_call> 

<primary_expression> ::== <ident> 
                        | <constant>
                        | <string>
                        | "(" <expression> ")"

<constant> ::== <integer_constant>
              | <character_constant>
              | <floating_constant>

<function_call> ::== <secondary_expression> "(" { {<expression>}? {"," <expression>}* }* ")"
                      
<array_access> ::== <secondary_expression> { "[" {<expression>}? "]" }+

#--------------------------------------------
# Conditionals and Loops
#--------------------------------------------

<selection_stat> ::== <if_statement>
                    | <switch_statement>

<if_statement> ::== "if" "(" <expression> ")" <statement> 
                        {"else if" "(" <expression> ")" <statement>}*
                        {"else" <statement>}?

<switch_statement> ::== "switch" "(" <expression> ")" 
                        "{" {"case" <expression> ":" {<statement>}* }* 
                            {"default" ":" {<statement>}* }? "}"
                    
<iteration_stat> ::== <while_loop> 
                    | <for_loop>
                    | <foreach_loop>

<while_loop> ::== "while" "(" {<expression>}? ")" <statement>

<for_loop> ::== "for" "(" {<expression>}? ";" {<expression>}? ";" {<expression>}? ")" <statement>

<foreach_loop> ::== "foreach" "(" {<ident> "in" <expression>}? ")"


<jump_stat> ::== "break"
               | "goto" <ident> 
               | "return" {<expression>}? 

<labeled_stat> ::== <ident> ":"

#----------------------------
# HardCoded Libfunctions
#----------------------------

<print_call> ::== "print" "(" <expression> ")"
                | "println" "(" <expression> ")"

<input_call> ::== "input" "(" <string> "," <addressable> ")"

<addressable> ::== <ident>
                 | <secondary_expression> "." <ident>
                 | <secondary_expression> "->" <ident>
                 | <array_access>


